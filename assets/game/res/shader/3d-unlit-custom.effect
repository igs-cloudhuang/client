// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainOffset:     { value: [0, 0, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        bleachColor:    { value: [1, 1, 1, 0], linear: true, editor: { type: color } }
        rimStrength:    { value: 0.0 }
        rimPower:       { value: 3.5 }
        fogDepth:       { value: 0.0 }
        fogColor:       { value: [0.1, 0.1, 0.1, 1], editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, linear: true, editor: { visible: false } } # backward compability
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
    - &shadow-caster
      vert: shadow-caster-vs:vert
      frag: shadow-caster-fs:frag
      phase: shadow-caster
      propertyIndex: 0
      rasterizerState:
        cullMode: front
      properties:
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        mainTexture:    { value: grey }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/fog-vs>

  #if USE_INSTANCING
    #pragma format(RG32F)
    in vec2 a_custom_color_ctrl;
    out vec2 v_custom_color_ctrl;
  #endif

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
      vec4 mainOffset;
    };
  #endif

  #if USE_BLEACH_COLOR
    out vec3 v_worldNormal;
    out vec3 v_worldPos;
  #else
    #if CC_USE_FOG != CC_FOG_NONE
      out vec3 v_worldPos;
    #endif
  #endif

  vec4 vert () {
    StandardVertInput In; 
    CCVertInput(In);

    #if USE_INSTANCING
      v_custom_color_ctrl = a_custom_color_ctrl;
    #endif

    #if USE_BLEACH_COLOR
      mat4 matWorld, matWorldIT;
      CCGetWorldMatrixFull(matWorld, matWorldIT);
    #else
      mat4 matWorld;
      CCGetWorldMatrix(matWorld);
    #endif

    #if USE_BLEACH_COLOR
      v_worldNormal = normalize((matWorldIT * vec4(In.normal, 0.)).xyz);
      v_worldPos = (matWorld * In.position).xyz;
    #else
      #if CC_USE_FOG != CC_FOG_NONE
        v_worldPos = (matWorld * In.position).xyz;
      #endif
    #endif

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw + mainOffset.xy;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    CC_TRANSFER_FOG(matWorld * In.position);
    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>

  #if USE_INSTANCING
    in vec2 v_custom_color_ctrl;
  #endif

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
    vec4 fogColor;
    float rimStrength;
    float rimPower;
    float fogDepth;    
  };

  #if USE_BLEACH_COLOR
    in vec3 v_worldPos;
    in vec3 v_worldNormal;
    uniform BleachValue {
      vec4 bleachColor;
    };
  #else
    #if CC_USE_FOG != CC_FOG_NONE
      in vec3 v_worldPos;
    #endif
  #endif

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  #if USE_BLEACH_COLOR
    vec3 bleach(vec3 oldColor, float lerpValue) {
      vec3 worldNor = normalize(v_worldNormal);
      vec3 viewDir = normalize(cc_cameraPos.xyz - v_worldPos);
      float theta = 1. - clamp(0., 1., dot(worldNor, viewDir));
      float scalar = 1.7;
      return mix(oldColor, bleachColor.rgb * scalar, lerpValue * pow(theta, 2.7));
    }
  #endif

  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_INSTANCING
      o.a *= (1. - v_custom_color_ctrl.x);  // 避免編輯器預設看到是透明的
    #endif

    #if USE_VERTEX_COLOR
      o.rgb *= SRGBToLinear(v_color.rgb);  //use linear
      o.a *= v_color.a;
    #endif

    #if USE_TEXTURE
      vec4 texColor = texture(mainTexture, v_uv);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      o *= texColor;
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif

    #if USE_BLEACH_COLOR
      if (fogDepth > 0.0) {  // uniform 屬於靜態分支
        o.rgb = mix(o.rgb, fogColor.rgb, pow(fogDepth, 1.4));
      }
      if (rimStrength > 0.0 && rimPower >= 0.0) {  // uniform 屬於靜態分支
        vec3 viewDir = normalize(cc_cameraPos.xyz - v_worldPos);
        float theta = abs(clamp(dot(v_worldNormal, viewDir), -1.0, 1.0));
        float rim = 1.0 - theta;
        o.rgb += mainColor.rgb * pow(rim, rimPower) * rimStrength;
      }
      #if USE_INSTANCING
        if (v_custom_color_ctrl.y > 0.) o.rgb = bleach(o.rgb, v_custom_color_ctrl.y);
      #else
        if (bleachColor.w > 0.) o.rgb = bleach(o.rgb, bleachColor.w);
      #endif
    #endif

    // CC_APPLY_FOG(o);
    #if CC_USE_FOG != CC_FOG_NONE
      #if CC_USE_HDR
        o.rgb = ACESToneMap(o.rgb);
      #endif
      o.rgb = LinearToSRGB(o.rgb);
      CC_APPLY_FOG(o, v_worldPos.xyz);
      return o;
    #else
      return CCFragOutput(o);
    #endif
  }
}%

CCProgram shadow-caster-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <builtin/uniforms/cc-shadow>

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif
  out vec4 v_worldPos;
  out highp vec2 v_clip_depth;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    v_worldPos = matWorld * position;
    vec4 clipPos = cc_matLightViewProj * v_worldPos;

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    v_clip_depth = clipPos.zw;

    return clipPos;
  }
}%

CCProgram shadow-caster-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <common/data/packing>
  #include <legacy/shadow-map-base>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif
  in vec4 v_worldPos;
  in highp vec2 v_clip_depth;

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  vec4 frag () {
    vec4 o = mainColor;

    #if USE_ALPHA_TEST
      #if USE_TEXTURE
        o *= texture(mainTexture, v_uv);
      #endif
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif

    highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;
    // spot use linear
    if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {
      // enabled linear depth
      #if CC_SHADOWMAP_USE_LINEAR_DEPTH
        clipDepth = CCGetLinearDepth(v_worldPos.xyz);
      #endif
    }

    #if CC_SHADOWMAP_FORMAT == SHADOWMAP_FORMAT_RGBA8
      return packDepthToRGBA(clipDepth);
    #else
      return vec4(clipDepth, 1.0, 1.0, 1.0);
    #endif
  }
}%
